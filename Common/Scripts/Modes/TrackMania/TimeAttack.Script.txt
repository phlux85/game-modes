/**
 *	Time Attack mode
 */

#Extends "Modes/TrackMania/ModeBase.Script.txt"

#Const	CompatibleMapTypes	"Race"
#Const	Version		"2014-10-07"
#Const	ScriptName	"TimeAttack.Script.txt"

#Include "TextLib" as TL

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit 	300	as _("Time limit :")

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_BotsNb 0
#Const Description _("""$fffIn $f00Time Attack$fff mode, the goal is to set the $f00best time$fff.

You have as many tries as you want, and you can $ff0retry$fff when you want by pressing the $ff0'Backspace'$fff key.

When the time is up, the $f00winner$fff is the player with the $f00best time$fff.""")

// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***InitServer***
***
declare Integer PrevTimeLimit = S_TimeLimit;
declare Integer StartTime;
***

***StartServer***
***
// ---------------------------------- //
// Initialize mode
PrevTimeLimit = S_TimeLimit;
StartTime = -1;
IndependantLaps = True;
MB_SetDefaultRespawnMode(CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint);

// ---------------------------------- //
// Initialize UI
UI::LoadModules(["TimeGap", "Chrono", "CheckpointTime", "PrevBestTime", "SpeedAndDistance", "Countdown"]);
UI::SetTimeGapMode("BestRace");
UI::SetCheckpointTimeMode("BestRace");
UI::SetIndependantLaps(IndependantLaps);

// ---------------------------------- //
// Create scores table
ST2::SetStyle("LibST_TMBaseSolo");
ST2::CreateCol("LibST_TMBestTime", "", "--:--.---", 8., 60.);
ST2::SetColTextAlign("LibST_TMBestTime", CMlControl::AlignHorizontal::Right);
ST2::SetModeIcon("Icons128x32_1|RT_TimeAttack");
ST2::SetFooterText(TL::Compose("%1 "^TL::TimeToText(S_TimeLimit*1000, False), _("Time Limit :")));
MB_SetScoresTableStyleFromXml(S_ScoresTableStylePath);
ST2::Build("TM");
***

***InitMap***
***
// ---------------------------------- //
// Initialize scores
Scores_Clear();
ST2::ClearScores();
***

***StartMap***
***
// ---------------------------------- //
// Initialize map
MB_Ladder_OpenMatch_All();
Users_SetNbFakeUsers(C_BotsNb, 0);

// ---------------------------------- //
// Warm up
declare ObjectiveNbLaps = Map.TMObjective_NbLaps;
if (ObjectiveNbLaps <= 0 || !Map.TMObjective_IsLapRace) ObjectiveNbLaps = 1;
declare MaxTime = (Map.TMObjective_AuthorTime / ObjectiveNbLaps) * S_WarmUpDuration;
declare WarmUpTimeLimit = Now + 5000 + MaxTime + (MaxTime / 6);
MB_WarmUp(WarmUpTimeLimit);

// ---------------------------------- //
// Initialize race
StartTime = Now + 3000;
SetTimeLimit(StartTime, S_TimeLimit);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

// ---------------------------------- //
// Spawn players for the race
foreach (Player in Players) {
	TM2::StartRace(Player, StartTime);
}
***

***WarmUp***
***
if (S_WarmUpDuration > 0) {
	XmlRpc::BeginWarmUp();
	
	WarmUp::Begin();
	WarmUp::SetProgression(1, 1);
	CutOffTimeLimit = _TimeLimit;
	
	while (Now < CutOffTimeLimit && !WarmUp::Stop() && !ServerShutdownRequested && !MatchEndRequested) {
		MB_Yield();
		WarmUp::Loop();
		WarmUp::ManageEvents();
		foreach (Event in PendingEvents) {
			XmlRpc::PassOn(Event);
		}
	}
	WarmUp::End();
	
	UIManager.UIAll.BigMessage = _("End of warmup, match starting...");
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	CutOffTimeLimit = Now + 4000;
	while (Now < CutOffTimeLimit && !ServerShutdownRequested && !MatchEndRequested) {
		MB_Yield();
	}
	CutOffTimeLimit = -1;
	UIManager.UIAll.BigMessage = "";
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	
	XmlRpc::EndWarmUp();
}
***

***PlayLoop***
***
// ---------------------------------- //
// Update the map duration setting
if (PrevTimeLimit != S_TimeLimit) {
	PrevTimeLimit = S_TimeLimit;
	SetTimeLimit(StartTime, S_TimeLimit);
}

// ---------------------------------- //
// Spawn players
foreach (Player in Players) {
	if (TM2::IsWaiting(Player)) {
		TM2::StartRace(Player);
	}
}

// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	PassOn(Event);
	XmlRpc::PassOn(Event);
	
	// ---------------------------------- //
	// Waypoint
	if (Event.Type == CTmModeEvent::EType::WayPoint) {
		if (Event.IsEndRace) {
			if (Event.Player.Score != Null) {
				if (Event.Player.Score.BestRace.Compare(Event.Player.CurRace, CTmResult::ETmRaceResultCriteria::Time) <= 0) {
					Event.Player.Score.BestRace = Event.Player.CurRace;
					Event.Player.Score.BestLap = Event.Player.CurRace;
				}
			}
			Event.Player.Score.PrevRace = Event.Player.CurRace;
			TM2::EndRace(Event.Player);
			Scores_Sort(CTmMode::ETmScoreSortOrder::BestRace_Time);
		} else if (Event.IsEndLap) {
			if (Event.Player.Score != Null) {
				if (Event.Player.Score.BestLap.Compare(Event.Player.CurLap, CTmResult::ETmRaceResultCriteria::Time) <= 0) {
					Event.Player.Score.BestLap = Event.Player.CurLap;
					Event.Player.Score.BestRace = Event.Player.CurLap;
				}
			}
			Event.Player.Score.PrevRace = Event.Player.CurLap;
			Scores_Sort(CTmMode::ETmScoreSortOrder::BestRace_Time);
		}
	}
	// ---------------------------------- //
	// GiveUp
	else if (Event.Type == CTmModeEvent::EType::GiveUp) {
		TM2::WaitRace(Event.Player);
	}
}

// ---------------------------------- //
// End the map when time limit is reached
if (CutOffTimeLimit > 0 && Now >= CutOffTimeLimit) {
	MB_StopMap = True;
}
***

***EndMap***
***
TM2::WaitRaceAll();

// ---------------------------------- //
// Close ladder
// Do not grant LP if the map was skipped
if (CutOffTimeLimit < 0 || Now >= CutOffTimeLimit) {
	Ladder_ComputeRank(CTmMode::ETmScoreSortOrder::BestRace_Time);
	MB_Ladder_CloseMatch();
} else {
	MB_Ladder_CancelMatch();	
}

Scores_Sort(CTmMode::ETmScoreSortOrder::BestRace_Time);
if (Scores.existskey(0) &&  Scores[0].BestRace.Time > 0) {
	MB_VictoryMessage = TL::Compose(_("$<%1$> wins the map!"), Scores[0].User.Name);
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //
Void SetTimeLimit(Integer _StartTime, Integer _NewTimeLimit) {
	if (_NewTimeLimit <= 0) {
		CutOffTimeLimit = -1;
		ST2::SetFooterText(TL::Compose("%1 -", _("Time Limit :")));
	} else {
		CutOffTimeLimit = _StartTime + (S_TimeLimit * 1000);
		ST2::SetFooterText(TL::Compose("%1 "^TL::TimeToText(S_TimeLimit*1000, False), _("Time Limit :")));
	}
}