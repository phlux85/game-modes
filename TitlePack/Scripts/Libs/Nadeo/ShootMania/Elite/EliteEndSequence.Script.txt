/**
 *  Elite Practice mode
 *
 *  This is a complete mode using copy of ModeBase.Script.txt
 *	It will be changed once it's possible to create a multi modes title pack
 */

#Const Version    "2014-11-18"
#Const ScriptName "EliteEndSequence.Script.txt"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_LP 		0
#Const C_RocketHits	1
#Const C_AtkRounds	2
#Const C_LpTotal	3

#Const C_LibEliteEndSequence_SequenceTime	6000 // milliseconds

// ---------------------------------- //
// Globales
// ---------------------------------- //
declare Ident	G_LibEliteEndSequence_LayerEndSequenceId;	///< The id of the layer EndSequence
declare Integer G_LibEliteEndSequence_SequenceTime;			///< Duration of the end squence

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/** Create the EndSequence manialink
 *
 *	@return		The manialink
 */
Text Private_CreateLayerEndSequence() {
	// Mise en forme
	
		// Alignement
		declare AlignCc = """ valign="center" halign="center" """;
		declare AlignCl = """ valign="center" halign="left" """;
		declare AlignCr = """ valign="center" halign="right" """;
		
		declare AlignTc = """ valign="top" halign="center" """;	
		declare AlignTl = """ valign="top" halign="left" """;
		declare AlignTr = """ valign="top" halign="right" """;
		
		declare AlignBc = """ valign="bottom" halign="center" """;
		declare AlignBl = """ valign="bottom" halign="left" """;
		declare AlignBr = """ valign="bottom" halign="right" """;
		
		declare HideSelectedFrames = """ hidden="true" """;
		
		// V1	
		declare V1_PosnY_Frame_MatchSequence = 0;
		declare V1_SizeMainX = 162.;
		declare V1_SizeMainY = 41.;
		declare V1_SizeX_Bg2 = V1_SizeMainX*1.215;
		declare V1_SizeY_Bg2 = V1_SizeMainY*0.855;
		declare V1_AlignY_Frame = 90.75;
		declare V1_Size_Label_Echelon = 12.;
		declare V1_SizeLabel_PlayerEchelonTitle = 1;
		declare V1_SizeY_Gauge = 10;
		declare V1_MarginRatioX_Bg_Gauge = 0.1;		
		declare V1_MarginRatioY_Bg_Gauge = 0.2;
		
		declare V1_MarginRatioX_Gauge_PlayerLp = 0;
		declare V1_MarginRatioY_Gauge_PlayerLp = 0.18;
		declare V1_MarginRatioX_Bg_PlayerEchelon = 0.1;
		declare V1_MarginRatioX_Echelon_PlayerName = 0.25;
		declare V1_PosnY_Gauge_LpLeft = 13.25;
		declare V1_SizeRatio_Label_PlayerLp = 4;
		declare V1_SizeRatio_Label_PlayerLpLeft = 1.75 ;
		declare V1_SizeRatio_Label_PlayerName = 6;
		declare V1_SizeRatio_Label_LpProgress = 2.5;
		
		declare V1_SizeRatio_GaugeX = 1 - 0.02 - V1_MarginRatioX_Bg_Gauge/2 - (V1_SizeMainX/2 - (V1_SizeMainX/2 - V1_Size_Label_Echelon*(1+V1_MarginRatioX_Bg_PlayerEchelon)))/(V1_SizeMainX);	
		declare V1_SizeY_Img_PlayerEchelon = 21;
		declare V1_SizeX_Img_PlayerEchelon = 0.75*V1_SizeY_Img_PlayerEchelon;
		
		declare V1_SizeX_Gauge_PlayerEchelon = 133;
		declare V1_SizeY_Gauge_PlayerEchelon = 10;
		declare V1_SizeX_Gauge_PlayerEchelonColor = V1_SizeX_Gauge_PlayerEchelon*0.975;
		declare V1_SizeY_Gauge_PlayerEchelonColor = V1_SizeY_Gauge_PlayerEchelon*0.89;
		declare V1_OffsetX_Frame = 3;
		
	// Center
		
		// Sizes		
		declare SizeY_Center = 100.;						// SIZE GENERALE (gere la hauteur de la frame center, et donc tout ce qu'il ya dedans)
		declare SizeRatioY_CenterHeader = 0.16;				// Hauteur de la frame <HEADER> rapport au SizeY_Cente
		declare SpaceRatioY_MainHeader = 0.03;				// Espacement entre <HEADER> ET <MAIN> rapport au SizeY_Center
		declare SizeRatioY_Main = 0.81;						// Hauteur de la frame <MAIN> rapport au SizeY_Center
		
		declare ColorTextYellow = """ textcolor="cc0" """;	// Type de jaune utilisé pour les police type LP
		//declare Style_Gauge_PlayerEchelon = """ style="EnergyBar" drawbg="true" """;
		//declare V1_SizeY_Gauge_PlayerEchelon = 10; 		// Largeur (Y) de la Jauge
		
		
	//---------------------------------------------------------------------------------------------------------------------------------
	// Taille generale de l'ensemble et proportion des frames
		
		declare SizeX_CardPlayer = 140; 	// largeur de l'ensemble
		declare SizeY_CardPlayer = 45.65;	// hauteur de l'ensemble
		declare SizeY_CardPlayerRank = 0.167*SizeY_CardPlayer; 
		declare SizeY_CardPlayerGauge = 0.375*SizeY_CardPlayer;
		declare SizeY_CardPlayerInfo = SizeY_CardPlayer - SizeY_CardPlayerRank - SizeY_CardPlayerGauge;
		
		// Reglages Frame 1 (CardPlayerRank)
		declare SizeRatio_Quad_PlayerZone = 0.75*SizeY_CardPlayerRank;
		declare SizeLabel_PlayerZone = 2;
		declare SizeLabel_PlayerRank = 4;
		declare MarginX_PlayerRank = 1.5;
		
		// Reglages Frame 2 (CardPlayerInfo)
		// si PosX_MainAlignLeft = 1/xxx alors PosX_MainAlignLeft = la marge Y entre le drapeaux de Continent et la CardPlayerRank
		declare PosX_MainAlignLeft = 1/((SizeY_CardPlayerRank-SizeRatio_Quad_PlayerZone)/(SizeY_CardPlayerRank-SizeRatio_Quad_PlayerZone));
			
			// Marges et positions
			declare MarginY_Label_PlayerName = 1.75; 							// Marge du texte en haut
			declare MarginY_Label_PlayerCountry = MarginY_Label_PlayerName;		// Marge du texte en bas
			declare MarginY_Quad_PlayerCountry = MarginY_Label_PlayerCountry;	// Marge du drapeau Pays en bas
			declare PosRatioY_Label_PlayerTeam = 1.15;
			declare PosRatioY_Quad_PlayerTeamEmblem = 1*PosRatioY_Label_PlayerTeam;
			
			// Tailles du texte
			declare SizeLabel_PlayerName = 3;
			declare SizeLabel_PlayerTeam = 2;
			declare SizeLabel_PlayerCountry = 1;
			
			// Tailles quad
			declare Size_Quad_PlayerTeamEmblem = 4;
			declare Size_Quad_PlayerCountry = 4;
			
				// Reglages Frame 2 - 1 (PlayerEchelon)
				declare SizeRatio_ImgEchelon = 1.05; 		// Ratio pour adapter l'image à la taille du quad repere
				
				//Taille du texte
				declare SizeLabel_PlayerEchelon = 10;
				
				declare PosRatioY_Label_PlayerEchelon = 0.6;
				declare PosRatioY_Label_PlayerEchelonTitle = 0.25;
				declare PosX_Label_PlayerEchelonTitle = -1; //1;
				declare PosX_Label_PlayerEchelon = PosX_Label_PlayerEchelonTitle;
				declare MarginRatioX_Label_PlayerEchelon = 0.6;
				declare PosX_ImgEchelon = -1.5;//0.85;//-0.1;
				declare PosY_ImgEchelon = 2;//0.66*SizeRatio_ImgEchelon;
		
		// Reglages Frame 3 (CardPlayerGauge)
		
		// Files Location
		//declare C_EliteGauge_ImgSrc	= """file://Media/Manialinks/Shootmania/Elite.Prod/""";
		declare Img_EndBg				= """ image="file://Media/Manialinks/Shootmania/Elite/Elite_EndBg.dds" """;
		declare Img_EndExemple1			= """ image="file://Media/Manialinks/Shootmania/Elite/Elite_EndExemple1.dds" """;
		declare Img_EndExemple2			= """ image="file://Media/Manialinks/Shootmania/Elite.Prod/Elite_EndExemple2.dds" """;
		declare Img_Rocket				= """ image="file://Media/Manialinks/Shootmania/Common/RocketWhite.dds" """;
		declare Img_Laser				= """ image="file://Media/Manialinks/Shootmania/Common/LaserWhite.dds" """;
		declare Img_EchelonProgressBg	= """ image="file://Media/Manialinks/Shootmania/Elite/interface_elite_echelonBg.dds" """;
		declare Img_EchelonProgressBg2	= """ image="file://Media/Manialinks/Shootmania/Common/EchelonProgressBg_bottom.dds" """;
		
		declare MarginY_Label_EchelonLevelComplete = 1.5;
		declare Margin_Quad_GaugeBg			= 9;
		declare Style_Gauge_PlayerEchelon	= """ style="EnergyBar" drawbg="False" """;
		declare ImgBaseDir					= """ image="file://Media/Manialinks/Common/Echelons/""" ;
		//declare ImgSrc_CardPlayerInfoBg	= ""; //ImgBaseDir ^"""CardPlayerInfoBg.dds" """;
		declare ImgSrc_Echelon0				= ImgBaseDir ^"""echelon0.dds" """;
		declare ImgSrc_GaugeBg				= ImgBaseDir ^"""GaugeLarger_Bg.dds" """;
		declare ImgSrc_Gauge				= ImgBaseDir ^"""GaugeLarger_Gauge.dds" """;
		declare ImgSrc_GaugeBronze			= ImgBaseDir ^"""GaugeLarger_GaugeBronze.dds" """;
		declare ImgSrc_GaugeSilver			= ImgBaseDir ^"""GaugeLarger_GaugeSilver.dds" """;
		declare ImgSrc_GaugeGold			= ImgBaseDir ^"""GaugeLarger_GaugeGold.dds" """;
		declare ImgSrc_GaugeOverlay			= ImgBaseDir ^"""GaugeLarger_Overlay.dds" """;
		declare ImgSrc_Background			= ImgBaseDir ^"""RightPanelBg.dds" """;
		declare EchelonPath					= "file://Media/Manialinks/Common/Echelons/echelon";
		
		// TEMP Quads repere mise en page
		declare Quad_HiddenStatus = """hidden="True" """;
	
	// Début du Manialink
	return """
<manialink version="1" name="EliteEndSequence:EndSequence">
<quad id="Quad_Flash" bgcolor="FFF0" {{{AlignCc}}} sizen="320 180" />
<frame id="Frame_MatchSequence" posn="0.7 {{{-V1_SizeY_Bg2*1.}}} 30">

// ------------------------------------- //
// Frame principale -------------------- //
		<quad id="Quad_EchelonProgressBg2" {{{AlignBc}}} bgcolor="000A" {{{Img_EchelonProgressBg2}}}  
			 sizen="{{{V1_SizeX_Bg2}}} {{{V1_SizeY_Bg2}}}"
			 posn="0
			 	   -90
					0" />
		
		<frame id="Frame_EchelonProgress" posn="{{{-V1_OffsetX_Frame}}} {{{-V1_AlignY_Frame}}}" {{{AlignTc}}}>
						
			<quad id="Quad_EchelonProgressBg" {{{AlignBc}}} bgcolor="000A" {{{Img_EchelonProgressBg}}}  hidden="1"
			 sizen="{{{V1_SizeMainX}}} {{{V1_SizeMainY}}}"
			 posn="0
			 	   0
				  -1" />
					
			<label id="Label_PlayerLpLeft" text="-- % echelon level complete." {{{AlignTc}}} style="TextRaceMessage"
			 textsize="{{{V1_SizeRatio_Label_PlayerLpLeft}}} {{{V1_SizeRatio_Label_PlayerLpLeft}}}"
			  posn="0
				    {{{V1_PosnY_Gauge_LpLeft}}}
				    8" />
			
			<label id="Label_PlayerLpProgress" textprefix="$s$bb8" text="--.- / --.-" {{{AlignCc}}} style="TextRaceMessage" {{{HideSelectedFrames}}}
			 textsize="{{{V1_SizeRatio_Label_LpProgress}}} {{{V1_SizeRatio_Label_LpProgress}}}"
			 posn="0
				   {{{Margin_Quad_GaugeBg + V1_SizeMainY*V1_MarginRatioY_Bg_Gauge - 5}}}
				   8" />
			
			<frame id="Frame_PlayerEchelon" 
			 {{{AlignBr}}} 
			 posn="{{{V1_SizeMainX/2 - V1_SizeX_Img_PlayerEchelon/2 - 2}}}
				   {{{V1_SizeMainY*V1_MarginRatioY_Bg_Gauge*0.6}}}
				   1" >
				
				<label id="Label_PlayerEchelonTitle" text="Echelon" 
				 style="TextRaceMessage" {{{AlignBc}}} 
				 textsize="{{{V1_SizeLabel_PlayerEchelonTitle}}}" 
				 posn="-1.25 {{{V1_SizeY_Img_PlayerEchelon * 0.73}}} 1" />
				
				<label id="Label_PlayerEchelon" text="-" {{{AlignTc}}} style="TextRaceMessageBig" 
			 	 textsize="{{{V1_Size_Label_Echelon}}}"
			  	 posn="-1.25 {{{V1_SizeY_Img_PlayerEchelon * 0.71}}} 1" />
						
				<quad id="Quad_ImgPlayerEchelon"  
					 {{{AlignBc}}} {{{ImgSrc_Echelon0}}}
					 sizen="{{{V1_SizeX_Img_PlayerEchelon}}} {{{V1_SizeY_Img_PlayerEchelon}}}"
					 posn="{{{PosX_ImgEchelon}}} {{{PosY_ImgEchelon}}} 1" />
					
			
			</frame>
			
			<frame id="Frame_CardPlayerGauge" 
			 posn="-{{{V1_SizeMainX/2*(1-V1_MarginRatioX_Bg_Gauge)}}}
				    {{{V1_SizeMainY*V1_MarginRatioY_Bg_Gauge}}}
				    1">
				
				<label id="Label_PrevPlayerLp" textprefix="$s$bb8" text="--.-" {{{AlignCr}}} style="TextCardSmallScores2" hidden="True"
			 	 textsize="{{{V1_SizeRatio_Label_PlayerLp*0.5}}}"
			 	 posn="29
				       {{{V1_SizeY_Gauge_PlayerEchelon+9}}}
				       1" />
				<label id="Label_PlayerName" {{{AlignBr}}} style="TextRaceMessage"
				 textsize="{{{V1_SizeRatio_Label_PlayerName}}}"
				 sizen="90 10"
				 posn="{{{V1_SizeX_Gauge_PlayerEchelon -0.75}}}
					   {{{V1_SizeY_Gauge_PlayerEchelon +0.25}}}
					   1" />
				<label id="Label_PlayerLp" textprefix="$s$bb8" text="+ --.-" {{{AlignCr}}} style="TextRaceMessage"
			 	 textsize="{{{V1_SizeRatio_Label_PlayerLp}}}"
			 	 posn="29
				       {{{V1_SizeY_Gauge_PlayerEchelon+4.5}}}
				       1" />
				
				<quad id="Quad_Lp" sizen="10 10" {{{AlignCl}}} style="Icons128x128_1" substyle="LadderPoints" 
				 posn="30 {{{V1_SizeY_Gauge_PlayerEchelon+3.75}}} 1" />
				
				<quad id="Quad_GaugeBg" 
				 {{{AlignTl}}} {{{ImgSrc_GaugeBg}}}
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelon}}} {{{V1_SizeY_Gauge_PlayerEchelon}}}" 
				 posn="0 {{{Margin_Quad_GaugeBg}}} 1" />
				<quad id="Quad_Gauge" 
				 {{{AlignTl}}} {{{ImgSrc_Gauge}}}
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelon}}} {{{V1_SizeY_Gauge_PlayerEchelon}}}" 
				 posn="0 {{{Margin_Quad_GaugeBg}}} 2" />
				<quad id="Quad_GaugeBronze" 
				 {{{AlignTl}}} {{{ImgSrc_GaugeBronze}}}
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelonColor}}} {{{V1_SizeY_Gauge_PlayerEchelonColor}}}"
				 posn="1.3 {{{Margin_Quad_GaugeBg - 0.9}}} 2" />
				<quad id="Quad_GaugeSilver" 
				 {{{AlignTl}}} {{{ImgSrc_GaugeSilver}}}
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelonColor}}} {{{V1_SizeY_Gauge_PlayerEchelonColor}}}" 
				 posn="1.3 {{{Margin_Quad_GaugeBg - 0.9}}} 2" />
				<quad id="Quad_GaugeGold" 
				 {{{AlignTl}}} {{{ImgSrc_GaugeGold}}}
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelonColor}}} {{{V1_SizeY_Gauge_PlayerEchelonColor}}}" 
				 posn="1.3 {{{Margin_Quad_GaugeBg - 0.9}}} 2" />
				<quad id="Quad_GaugeBefore" 
				 {{{AlignTl}}} bgcolor="0005"
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelonColor}}} {{{V1_SizeY_Gauge_PlayerEchelonColor}}}" 
				 posn="1.3 {{{Margin_Quad_GaugeBg - 0.9}}} 3" />
				<quad id="Quad_GaugeOverlay" 
				 {{{AlignTl}}} {{{ImgSrc_GaugeOverlay}}}
				 sizen="{{{V1_SizeX_Gauge_PlayerEchelon}}} {{{V1_SizeY_Gauge_PlayerEchelon}}}" 
				 posn="0 {{{Margin_Quad_GaugeBg}}} 4" />
				
				<label id="Label_EchelonCurrent" text="8" {{{AlignBc}}} style="TextRaceMessageBig" textsize="3" 
				 posn="7.25
					   1.1
					   8" />
				
				<label id="Label_EchelonNext" text="9" {{{AlignBc}}} style="TextRaceMessageBig" textsize="3" 
				 posn="{{{-7.25 +V1_SizeX_Gauge_PlayerEchelon}}}
					   1.1
					   8" />
			</frame>

	</frame>
		
</frame>
			
<script><!--

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Const C_MaxEchelon		100
#Const C_MaxDeciEchelon	100.
#Const C_AnimDuration	5000

declare Integer Period;

declare CMlQuad Quad_PlayerEchelon;
declare CMlQuad Quad_Gauge;
declare CMlQuad Quad_GaugeBronze;
declare CMlQuad Quad_GaugeSilver;
declare CMlQuad Quad_GaugeGold;
declare CMlQuad Quad_GaugeBefore;
declare CMlQuad Quad_ImgPlayerEchelon;

Void Initialize()
{
	Quad_PlayerEchelon <=> (Page.GetFirstChild("Quad_PlayerEchelon") as CMlQuad);
	Quad_Gauge <=> (Page.GetFirstChild("Quad_Gauge") as CMlQuad);
	Quad_GaugeBronze <=> (Page.GetFirstChild("Quad_GaugeBronze") as CMlQuad);
	Quad_GaugeSilver <=> (Page.GetFirstChild("Quad_GaugeSilver") as CMlQuad);
	Quad_GaugeGold <=> (Page.GetFirstChild("Quad_GaugeGold") as CMlQuad);
	Quad_GaugeBefore <=> (Page.GetFirstChild("Quad_GaugeBefore") as CMlQuad);
	Quad_ImgPlayerEchelon <=> (Page.GetFirstChild("Quad_ImgPlayerEchelon") as CMlQuad);
}
	
CMlQuad UpdateImgColors(Integer PlayerEchelon)
{
	declare CMlQuad GaugeColor = Quad_GaugeBronze;
	declare EchelonColor = 1 + (PlayerEchelon-1)/3;
	
	if(EchelonColor <= 0) EchelonColor = 1;
	if(EchelonColor >  3) EchelonColor = 3;
	
	switch (EchelonColor)
	{
		case 1 : 
		{
			Quad_Gauge.Hide();
			Quad_GaugeBronze.Show();
			Quad_GaugeSilver.Hide();
			Quad_GaugeGold.Hide();
			GaugeColor = Quad_GaugeBronze;
		}
		
		case 2 : 
		{
			Quad_Gauge.Hide();
			Quad_GaugeBronze.Hide();
			Quad_GaugeSilver.Show();
			Quad_GaugeGold.Hide();
			GaugeColor = Quad_GaugeSilver;
		}
		
		case 3 : 
		{
			Quad_Gauge.Hide();
			Quad_GaugeBronze.Hide();
			Quad_GaugeSilver.Hide();
			Quad_GaugeGold.Show();
			GaugeColor = Quad_GaugeGold;
		}
		
	}
	
	switch (PlayerEchelon)
	{
		case 0 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}0.dds");
		}
		
		case 1 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}1.dds");
		}
		
		case 2 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}2.dds");
		}
		
		case 3 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}3.dds");
		}
		
		case 4 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}4.dds");
		}
		
		case 5 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}5.dds");
		}
		
		case 6 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}6.dds");
		}
		
		case 7 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}7.dds");
		}
		
		case 8 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}8.dds");
		}
		
		case 9 : 
		{
			Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}9.dds");
		}
		
		default :
		{
			if (PlayerEchelon > 9) {
				Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}9.dds");
			} else {
				Quad_ImgPlayerEchelon.ChangeImageUrl("{{{EchelonPath}}}0.dds");
			}
		}
	}
	return GaugeColor;
}

Real Ease(Integer _T, Real _B, Real _C, Integer _D) {
	if (_T == _D) return _B + _C;
	return _C * (-MathLib::Pow(2., -10. * _T / (_D*1.)) + 1.) + _B;
}

main()
{
	while(InputPlayer == Null) yield;
	
	Initialize();
	
	declare PrevLayerEndSequenceUpdate = 0;	
	declare netread Integer Net_Elite_LayerEndSequenceUpdate for Teams[0];
	declare netread Integer Net_WinnerMapClan for Teams[0];
	declare netread Real[Integer][Text] Net_Elite_PlayerListClan1 for Teams[0];
	declare netread Real[Integer][Text] Net_Elite_PlayerListClan2 for Teams[0];
	
	declare Label_PlayerLp <=> (Page.GetFirstChild("Label_PlayerLp") as CMlLabel);
	declare Label_PlayerLpLeft <=> (Page.GetFirstChild("Label_PlayerLpLeft") as CMlLabel);
	declare Label_PlayerName <=> (Page.GetFirstChild("Label_PlayerName") as CMlLabel);
	declare Label_PlayerLpProgress <=> (Page.GetFirstChild("Label_PlayerLpProgress") as CMlLabel);
	declare Label_PlayerEchelon <=> (Page.GetFirstChild("Label_PlayerEchelon") as CMlLabel);
	declare Label_EchelonCurrent <=> (Page.GetFirstChild("Label_EchelonCurrent") as CMlLabel);
	declare Label_EchelonNext <=> (Page.GetFirstChild("Label_EchelonNext") as CMlLabel);
	declare Label_PrevPlayerLp <=> (Page.GetFirstChild("Label_PrevPlayerLp") as CMlLabel);
	declare Frame_MatchSequence <=> (Page.GetFirstChild("Frame_MatchSequence") as CMlFrame);
	
	// TEMP recuperation des donnees
	declare UserLadderPoints = InputPlayer.User.LadderPoints;
	//UserLadderPoints = 69750.; // Debug
	declare UserZonePath = InputPlayer.User.ZonePath;	
	declare UserLadderRank = InputPlayer.User.LadderRank;
	declare PlayerName = InputPlayer.Name;
	declare UserClubLink = InputPlayer.User.ClubLink;
	
	declare EchelonRange = 10000;
	declare PlayerLp = InputPlayer.Score.LadderScore;
	if (!InputPlayer.Score.IsRegisteredForLadderMatch || PlayerLp == -1.) PlayerLp = 0.;
	//PlayerLp = -8.79; // Debug
	
	Period = 0;
	declare PrevNow = Now; 
	
	declare Integer PrevPlayerEchelon = MathLib::FloorInteger((UserLadderPoints - PlayerLp)/EchelonRange);
	declare Integer PlayerEchelon = PrevPlayerEchelon;
	if(PlayerEchelon < 0) PlayerEchelon = 0;
  	if(PlayerEchelon > C_MaxEchelon) PlayerEchelon = C_MaxEchelon;
	declare Integer NewPlayerEchelon = MathLib::FloorInteger((UserLadderPoints)/EchelonRange);
	declare PlayerNextEchelonLp = (PlayerEchelon+1)*EchelonRange;
	
	declare PrevPlayerDeciEchelon = MathLib::FloorInteger(((UserLadderPoints - PlayerLp)/(EchelonRange*0.1)))/10.;
	declare PlayerDeciEchelon = PrevPlayerDeciEchelon;
	if(PlayerDeciEchelon < 0.) PlayerDeciEchelon = 0.;
  	if(PlayerDeciEchelon > C_MaxDeciEchelon) PlayerDeciEchelon = C_MaxDeciEchelon;
	declare NewPlayerDeciEchelon = MathLib::FloorInteger((UserLadderPoints/(EchelonRange*0.1)))/10.;

	declare GaugeImgRatio = (MathLib::NearestInteger(UserLadderPoints - PlayerLp) % 1000)/1000.;
	
	declare TempPlayerLp = 0.;
	declare TimeDisplay_Frame = 0.3 *1000.;
	declare TimeDisplay_Transition = 0.2 *1000.;
	
	// animation du debut (la frame monte)
	declare AnimDone_PlayerLp = False;
	declare AnimDone_Frame = False;
	declare AnimDone_Transition = False;
	
	// animation de la fin (la frame descend)
	declare AnimEndTime = Now + {{{G_LibEliteEndSequence_SequenceTime}}};
	declare AnimEndDone = False;
	
	Label_PlayerName.SetText(InputPlayer.Name);
	Label_PlayerLpProgress.SetText("--.- / "^ PlayerNextEchelonLp);
	Label_PlayerLpLeft.SetText("-- % Deci-echelon level complete.");
	
	if (PlayerEchelon <= 9) Label_PlayerEchelon.SetText(""^ PlayerEchelon);
	else Label_PlayerEchelon.SetText("9");
	
	if (PlayerDeciEchelon - PlayerEchelon == 0.) {
		if (PlayerEchelon <= C_MaxEchelon) Label_EchelonCurrent.SetText(""^ PlayerEchelon);
		else Label_EchelonCurrent.SetText(""^C_MaxEchelon);
	} else {
		if (PlayerDeciEchelon <= C_MaxDeciEchelon) Label_EchelonCurrent.SetText(""^ PlayerDeciEchelon);
		else Label_EchelonCurrent.SetText(""^C_MaxEchelon);
	}
	
	if (PlayerDeciEchelon+0.1 - (PlayerEchelon + 1) == 0.) {
		if (PlayerEchelon+1 <= C_MaxEchelon) Label_EchelonNext.SetText(""^ PlayerEchelon+1);
		else Label_EchelonNext.SetText(""^C_MaxEchelon);
	} else {
		if (PlayerDeciEchelon+0.1 <= C_MaxDeciEchelon) Label_EchelonNext.SetText(""^ PlayerDeciEchelon+0.1);
		else Label_EchelonNext.SetText(""^C_MaxEchelon);
	}
	
	Label_PrevPlayerLp.SetText(""^ MathLib::FloorInteger(UserLadderPoints - PlayerLp));
	
	Label_PlayerLpLeft.Show();
	Label_PlayerLpProgress.Hide();
	
	declare EchelonColor = 1 + (PlayerEchelon/3);
	declare GaugeColor = Quad_Gauge;
	declare SoundVarEchelon = 0;
	
	declare PlayerEchelonLvlComplete = (UserLadderPoints - PlayerEchelon*EchelonRange)/EchelonRange;
	declare PlayerDeciEchelonLvlComplete = GaugeImgRatio;

	declare	PosnY_Frame = {{{V1_PosnY_Frame_MatchSequence*1.}}};
	declare StartPosnY_Frame = {{{-V1_SizeY_Bg2*1.}}};
	declare TempPosnY_Frame = StartPosnY_Frame;
	declare Int_PlayerDeciEchelonLvlComplete = MathLib::FloorInteger(PlayerDeciEchelonLvlComplete*100);
	declare Countdown = 0;
	
	Label_PlayerLpLeft.SetText("$i"^ Int_PlayerDeciEchelonLvlComplete ^"% Complete");
	GaugeColor = UpdateImgColors(PlayerEchelon);
	GaugeColor.Size.X = {{{V1_SizeX_Gauge_PlayerEchelonColor}}} * GaugeImgRatio;
	Quad_GaugeBefore.Size.X =  {{{V1_SizeX_Gauge_PlayerEchelonColor}}} * GaugeImgRatio;
	
	declare StartAnimLp = -1;
	declare EndAnimLp = -1;
	declare NextSoundTick = -1.;
	
	while (True) 
	{
		yield;
		
		Period = Now - PrevNow;
		PrevNow = Now;
		if (InputPlayer == Null) continue;
		if (!PageIsVisible) continue;
		
		// --------------------------------------------------- //
		// Animation des frames et différentes infos du match 
		
		if (!AnimDone_Frame) 
		{
			if (TempPosnY_Frame < PosnY_Frame ) 
			{
				Frame_MatchSequence.RelativePosition.Y = TempPosnY_Frame;
				
				TempPosnY_Frame += Period * ((PosnY_Frame - StartPosnY_Frame)/TimeDisplay_Frame);
				if (TempPosnY_Frame > PosnY_Frame) TempPosnY_Frame = PosnY_Frame;
			} 
			else 
			{
				TempPosnY_Frame = PosnY_Frame;
				Frame_MatchSequence.RelativePosition.Y = PosnY_Frame;
				AnimDone_Frame = True; 
			}
		}
		
		if (AnimDone_Frame && !AnimDone_Transition) 
		{
			if (TimeDisplay_Transition > 0.) 
			{
				TimeDisplay_Transition -= Period;
				if (TimeDisplay_Transition < 0.) TimeDisplay_Transition = 0.;
			} 
			else 
			{ 
				AnimDone_Transition = True; 
			}
		}
		
		if (!AnimDone_PlayerLp && AnimDone_Frame && AnimDone_Transition) 
		{
			if (StartAnimLp == -1) {
				StartAnimLp = Now;
				EndAnimLp = Now + C_AnimDuration;
			}
			
			declare TempPlayerLp = 0.;
			if (Now <= EndAnimLp && PlayerLp != 0.) {
				TempPlayerLp = Ease(Now - StartAnimLp, 0., PlayerLp, C_AnimDuration);
			} else {
				TempPlayerLp = PlayerLp;
				AnimDone_PlayerLp = True;
				PlayUiSound(::EUISound::Custom1, 0, 1.0);
			}
				
			// Amount of LP added so far
			declare LPGain = MathLib::NearestInteger(TempPlayerLp*100.)/100.;
			declare ShortenLP = TextLib::ToText(LPGain);
			declare SplitLP = TextLib::Split(".", ShortenLP);
			if (SplitLP.count == 1) ShortenLP = SplitLP[0]^".00";
			else if (SplitLP.count == 2 && TextLib::Length(SplitLP[1]) < 2) ShortenLP = SplitLP[0]^"."^SplitLP[1]^"0";
			if (LPGain >= 0) Label_PlayerLp.SetText("+ "^ ShortenLP);
			else Label_PlayerLp.SetText(ShortenLP);
			
			// Progress bar
			//Label_PlayerLpProgress.Value = (UserLadderPoints - PlayerLp + TempPlayerLp)^" / "^PlayerNextEchelonLp;
			GaugeImgRatio = (MathLib::NearestInteger(UserLadderPoints - PlayerLp + TempPlayerLp) % 1000) / 1000.;
			Int_PlayerDeciEchelonLvlComplete = MathLib::FloorInteger(GaugeImgRatio * 100);
			Label_PlayerLpLeft.SetText("$i"^ Int_PlayerDeciEchelonLvlComplete ^"% Complete");
			if (GaugeImgRatio > 1.) GaugeImgRatio = 1.;
			GaugeColor.Size.X = {{{V1_SizeX_Gauge_PlayerEchelonColor}}} * GaugeImgRatio;
			
			// Player echelon
			PlayerEchelon = MathLib::FloorInteger((UserLadderPoints - PlayerLp + TempPlayerLp) / EchelonRange);
			if (PlayerEchelon < 0) PlayerEchelon = 0;
  			if (PlayerEchelon > C_MaxEchelon) PlayerEchelon = C_MaxEchelon;
			
			// Player deci echelon
			PlayerDeciEchelon = (MathLib::FloorInteger((UserLadderPoints - PlayerLp + TempPlayerLp) / (EchelonRange * 0.1))) / 10.;
			if (PlayerDeciEchelon < 0.) PlayerDeciEchelon = 0.;
  			if (PlayerDeciEchelon > C_MaxDeciEchelon) PlayerDeciEchelon = C_MaxDeciEchelon;
				
			// Play sound
			declare ProgressionRatio = 0.;
			if (PlayerLp != 0.) ProgressionRatio = TempPlayerLp / PlayerLp;
			if (ProgressionRatio >= NextSoundTick) {
				NextSoundTick = ProgressionRatio + 0.005;
				PlayUiSound(::EUISound::Custom1, 0, 1.0);
			}
			
			// Change Deci echelon
			if (PlayerDeciEchelon != PrevPlayerDeciEchelon) {
				PrevPlayerDeciEchelon = PlayerDeciEchelon;
				PlayerNextEchelonLp = (PlayerEchelon + 1) * EchelonRange;
				GaugeColor = UpdateImgColors(PlayerEchelon);
				
				if (PlayerEchelon <= 9) Label_PlayerEchelon.Value = TextLib::ToText(PlayerEchelon);
				else Label_PlayerEchelon.Value = "9";
				
				// Current deci echelon (left)
				if (PlayerDeciEchelon - PlayerEchelon == 0.) {
					if (PlayerEchelon <= C_MaxEchelon) Label_EchelonCurrent.Value = TextLib::ToText(PlayerEchelon);
					else Label_EchelonCurrent.Value = TextLib::ToText(C_MaxEchelon);
				} else {
					if (PlayerDeciEchelon <= C_MaxDeciEchelon) Label_EchelonCurrent.Value = TextLib::ToText(PlayerDeciEchelon);
					else Label_EchelonCurrent.Value = TextLib::ToText(C_MaxEchelon);
				}
				
				// Next deci echelon (right)
				if (PlayerDeciEchelon + 0.1 - (PlayerEchelon + 1) == 0.) {
					if (PlayerEchelon + 1 <= C_MaxEchelon) Label_EchelonNext.Value = TextLib::ToText(PlayerEchelon + 1);
					else Label_EchelonNext.Value = TextLib::ToText(C_MaxEchelon);
				} else {
					if (PlayerDeciEchelon + 0.1 <= C_MaxDeciEchelon) Label_EchelonNext.Value = TextLib::ToText(PlayerDeciEchelon + 0.1);
					else Label_EchelonNext.Value = TextLib::ToText(C_MaxEchelon);
				}
				
				// Hide/Show darker gauge overlay
				if (PlayerLp >= 0.) {
					Quad_GaugeBefore.Visible = False;
				} else {
					Quad_GaugeBefore.Size.X =  {{{V1_SizeX_Gauge_PlayerEchelonColor}}} * 1.;
				}
				
				// Change echelon
				if (PlayerEchelon != PrevPlayerEchelon) {
					PrevPlayerEchelon = PlayerEchelon;
					
					if (PlayerEchelon <= 9) Label_PlayerEchelon.Value = TextLib::ToText(PlayerEchelon);
					else Label_PlayerEchelon.Value = "9";
					
					if (PlayerEchelon > 0 && PlayerEchelon <= 3) SoundVarEchelon = 0;
					else if (PlayerEchelon > 3 && PlayerEchelon <= 6) SoundVarEchelon = 1;
					else if (PlayerEchelon > 6 && PlayerEchelon <= 9) SoundVarEchelon = 2;
					PlayUiSound(::EUISound::Record, SoundVarEchelon, 2.0);
				}
			}
		}
		
		if (PrevLayerEndSequenceUpdate != Net_Elite_LayerEndSequenceUpdate) {
			PrevLayerEndSequenceUpdate = Net_Elite_LayerEndSequenceUpdate;
		}
	}
}

--></script>
</manialink>""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/// Initalize the players list at the beginning of the map
Void InitPlayersList() {
	foreach (Score in Scores) {
		declare Timestamp for Score = 0;
		Timestamp = 0;
	}
}

// ---------------------------------- //
/// Save the last players who played during the last turn
Void SavePlayersList(Ident[Integer][Integer] _PlayersList) {
	for (I, 1, 2) {
		if (!_PlayersList.existskey(I)) continue;
		
		foreach (PlayerId => Order in _PlayersList[I]) { 
			if (!Players.existskey(PlayerId)) continue;
			declare Player <=> Players[PlayerId];
			if (Player.Score == Null) continue;
			
			declare Timestamp for Player.Score = 0;
			Timestamp = Now;
		}
	}
}

// ---------------------------------- //
/// Attach the EndSequence layer to all players
Void Attach() {
	if (UIManager.UIAll.UILayers.existskey(G_LibEliteEndSequence_LayerEndSequenceId)) return;
	if (!UIManager.UILayers.existskey(G_LibEliteEndSequence_LayerEndSequenceId)) return;
	
	UIManager.UIAll.UILayers.add(UIManager.UILayers[G_LibEliteEndSequence_LayerEndSequenceId]);
}

// ---------------------------------- //
/// Detach the EndSequence layer from all players
Void Detach() {
	if (!UIManager.UIAll.UILayers.existskey(G_LibEliteEndSequence_LayerEndSequenceId)) return;
	if (!UIManager.UILayers.existskey(G_LibEliteEndSequence_LayerEndSequenceId)) return;
	
	declare Detached = UIManager.UIAll.UILayers.removekey(G_LibEliteEndSequence_LayerEndSequenceId);
}

// ---------------------------------- //
/// Send the infos to the EndSequence manialink
Void Update(Integer _WinnerMapClan) {
	declare OrderClan1 = Integer[Ident];
	declare OrderClan2 = Integer[Ident];
	
	foreach (Score in Scores) 
	{
		declare Timestamp for Score = 0;
		if (Timestamp <= 0) continue;
		
		if (Score.LadderClan == 1) 
		{
			OrderClan1[Score.Id] = -Timestamp;	
		}
		else if (Score.LadderClan == 2) 
		{
			OrderClan2[Score.Id] = -Timestamp;	
		}		
	}
	
	OrderClan1 = OrderClan1.sort();
	OrderClan2 = OrderClan2.sort();
	
	declare netwrite Net_Elite_PlayerListClan1 for Teams[0] = Real[Integer][Text];
	declare netwrite Net_Elite_PlayerListClan2 for Teams[0] = Real[Integer][Text];
	Net_Elite_PlayerListClan1 = Real[Integer][Text];
	Net_Elite_PlayerListClan2 = Real[Integer][Text];
	declare PlayerCount = 0;
	
	foreach (ScoreId => Timestamp in OrderClan1)
	{
		if (PlayerCount >= 3) break;
		declare Score <=> Scores[ScoreId];
		declare NbHit for Score = 0;
		Net_Elite_PlayerListClan1[Score.User.Login] = Real[Integer];
		Net_Elite_PlayerListClan1[Score.User.Login][C_LP] = Score.LadderScore;
		Net_Elite_PlayerListClan1[Score.User.Login][C_RocketHits] = NbHit * 1.;
		Net_Elite_PlayerListClan1[Score.User.Login][C_AtkRounds] = Score.Points * 1.;
		Net_Elite_PlayerListClan1[Score.User.Login][C_LpTotal] = Score.User.LadderPoints;
		PlayerCount += 1;		
	}
	
	PlayerCount = 0;
	foreach (ScoreId => Timestamp in OrderClan2)
	{
		if (PlayerCount >= 3) break;
		declare Score <=> Scores[ScoreId];
		declare NbHit for Score = 0;
		Net_Elite_PlayerListClan2[Score.User.Login] = Real[Integer];
		Net_Elite_PlayerListClan2[Score.User.Login][C_LP] = Score.LadderScore;
		Net_Elite_PlayerListClan2[Score.User.Login][C_RocketHits] = NbHit * 1.;
		Net_Elite_PlayerListClan2[Score.User.Login][C_AtkRounds] = Score.Points * 1.;
		Net_Elite_PlayerListClan2[Score.User.Login][C_LpTotal] = Score.User.LadderPoints;
		PlayerCount += 1;
	}
	
	declare netwrite Net_WinnerMapClan for Teams[0] = _WinnerMapClan;
	Net_WinnerMapClan = _WinnerMapClan;
	
	declare netwrite Net_Elite_LayerEndSequenceUpdate for Teams[0] = 0;
	Net_Elite_LayerEndSequenceUpdate = Now;
}

/*
// LATER
Void SetSequenceTime(Integer _SequenceTime) {
	G_LibEliteEndSequence_SequenceTime = _SequenceTime;
}
*/

// ---------------------------------- //
/// Unload the library
Void Unload() {
	if (G_LibEliteEndSequence_LayerEndSequenceId != NullId && UIManager.UILayers.existskey(G_LibEliteEndSequence_LayerEndSequenceId)) {
		UIManager.UILayerDestroy(UIManager.UILayers[G_LibEliteEndSequence_LayerEndSequenceId]);
		G_LibEliteEndSequence_LayerEndSequenceId = NullId;
	}
	
	InitPlayersList();
	
	declare netwrite Net_Elite_PlayerListClan1 for Teams[0] = Real[Integer][Text];
	declare netwrite Net_Elite_PlayerListClan2 for Teams[0] = Real[Integer][Text];
	declare netwrite Net_WinnerMapClan for Teams[0] = -1;
	Net_Elite_PlayerListClan1 = Real[Integer][Text];
	Net_Elite_PlayerListClan2 = Real[Integer][Text];
	Net_WinnerMapClan = -1;
}

// ---------------------------------- //
/// Load and initialize the library
Void Load() {
	Unload();
	
	// set the time
	G_LibEliteEndSequence_SequenceTime = C_LibEliteEndSequence_SequenceTime;
	
	// Create the EndSequence layer
	declare LayerEndSequence <=> UIManager.UILayerCreate();
	LayerEndSequence.ManialinkPage = Private_CreateLayerEndSequence();
	G_LibEliteEndSequence_LayerEndSequenceId = LayerEndSequence.Id;
}